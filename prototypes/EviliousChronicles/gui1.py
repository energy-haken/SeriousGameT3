
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer



from pathlib import Path
from tkinter import *
from tkinter.messagebox import showerror, showinfo

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

from PIL import ImageTk
from sympy.core.random import random

from generation_type import GenerationType
from model_handler import ModelHandler
from observer import Observer


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"UI/assets/frame1")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def error_handler(message):
    showerror("Error", message)



class Gui(Observer):
    prompt = None
    output = None
    output_label_global = None
    prompt_label_global = None
    user_input_global = None
    model_handler = None
    model_label = None
    parameters = None
    parameters_entry_list = None
    image_label = None
    generation_type = GenerationType.TEXT
    gen_type_label = None
    processing_type_button = None
    image_cache = None # stored image if the user want to save it

    def __init__(self,window):


        self.prompt = "I like trains"
        self.output = "I hate trains"
        self.output_label_global = None
        self.prompt_label_global = None
        self.user_input_global = None
        self.parameters = {}
        self.model_handler = ModelHandler()
        self.model_handler.add_observer(self)



        canvas = Canvas(
            window,
            bg = "#FFFFFF",
        height = 1080,
        width = 1920,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
        )


        canvas.place(x = 0, y = 0)


        canvas.create_rectangle(
        0.0,
        0.0,
        1920.0,
        1080.0,
        fill="#D9D9D9",
        outline="")

        image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = canvas.create_image(
            960.0,
            540.0,
            image=image_image_1
        )     

        canvas.create_rectangle(
            68.0,
            90.0,
            452.0,
            214.0,
            fill="#6C33F1",
            outline="")

        canvas.create_rectangle(
            23.0,
            28.0,
            506.0,
            152.0,
            fill="#1A0350",
            outline="")

        canvas.create_text(
            115.0,
            49.0,
            anchor="nw",
            text="Å’STRO-GEN",
            fill="#FFFFFF",
            font=("Khmer", 48 * -1)
        )

        canvas.create_text(
            87.0,
            152.0,
            anchor="nw",
            text="Project : ",
            fill="#FFFFFF",
            font=("Khmer", 32 * -1)
        )

        entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        entry_bg_1 = canvas.create_image(
            960.0,
            118.0,
            image=entry_image_1
        )
        entry_1 = Entry(
            bd=0,
            bg="#FFFFFF",
            fg="#000716",
            highlightthickness=0
        )
        entry_1.place(
            x=772.0,
            y=89.0,
            width=376.0,
            height=56.0
        )

        canvas.create_text(
            924.0,
            64.0,
            anchor="nw",
            text="Prompt",
            fill="#FFFFFF",
            font=("Khmer", 20 * -1)
        )


        button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        button_image_6 = PhotoImage(file=relative_to_assets("button_6.png"))
        buttonProcessingType = Button(
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: Button(entry_1, image=button_image_6, command=lambda: self.change_processing_type()),
            relief="flat"
        ) ; '''Button for the CPU/GPU Check'''


        buttonProcessingType.place(
            x=843.0,
            y=0.0,
            width=211.0,
            height=34.0
        )

        button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        buttonModelType = Button(
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_2 clicked"),
            relief="flat"
        ) ; '''Button to change model type between text or image'''

        buttonModelType.place(
            x=148.0,
            y=807.0,
            width=211.0,
            height=34.0
        )

        canvas.create_rectangle(
            101.0,
            304.0,
            408.0,
            807.0,
            fill="#330B0B",
            outline="")

        canvas.create_rectangle(
            135.0,
            362.0,
            372.0,
            749.0,
            fill="#FFFFFF",
            outline="")

        canvas.create_text(
            190.0,
            307.0,
            anchor="nw",
            text="Models :",
            fill="#FFFFFF",
            font=("Khmer", 32 * -1)
        )

        list_models = Listbox(buttonProcessingType)

        button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        buttonValidateModel = Button(
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_3 clicked"),
            relief="flat"
        )

        buttonValidateModel.place(
            x=168.0,
            y=757.0,
            width=172.0,
            height=34.0
        )

        button_image_4 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        buttonStopGeneration = Button(
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_4 clicked"),
            relief="flat"
        )
        buttonStopGeneration.place(
            x=863.0,
            y=168.0,
            width=194.0,
            height=41.0
        )
        #
        # window.geometry("1920x1080")
        window.configure(bg = "#FFFFFF")
        #
        #
        # window.resizable(False, False)
        # window.mainloop()

    def change_processing_type(self):
        self.model_handler.change_processing_method(),

    def stop(self):
        self.unload_model()
        self.image_label.config(image="") # clear the image
        self.image_cache = None

    def update_gen_type(self):
        if self.generation_type == GenerationType.TEXT:
            self.model_handler.set_generation_type(GenerationType.IMAGE)
            self.generation_type = GenerationType.IMAGE
        else:
            self.model_handler.set_generation_type(GenerationType.TEXT)
            self.generation_type = GenerationType.TEXT
        self.gen_type_label.config(text=self.generation_type.name)
            #self.update_models_list()

    def obs_update_models_list(self, model_list):
        if self.parameters_entry_list is not None:
           self.parameters_entry_list["selected_model"].delete(0,END)
           for model in model_list:
                self.parameters_entry_list["selected_model"].insert(1, model)

    def generate(self):
        self.update_prompt()
        self.model_handler.generate(self.prompt)

    def save_image(self):
        base_path = "resources/images/"
        file_name = "generated_img"
        if not self.image_cache is None:
            img = ImageTk.getimage(self.image_cache) # get the actual image
            nb = 1
            if Path(base_path).is_dir():    # if the directory exist, do
                while Path(base_path + file_name + str(nb) + ".png").is_file():
                    nb+=1
                img.save(base_path + file_name + str(nb) + ".png", "PNG")
                showinfo("Saved", "Image saved at : "+base_path)
        else:
            error_handler("No image to save")

    def update_image(self,img):
        if img[0]=="error":
            error_handler("Select a model first, then presse apply")
        else:
            tkimg = ImageTk.PhotoImage(img[0])
            self.image_label.config(image=tkimg)
            self.image_label.image = tkimg
            self.image_cache = tkimg

    def unload_model(self):
        self.model_handler.turn_off_model()


    def update_output(self,message):
        if 'error' in message[0]:
            error_handler(message[0]['error'])
        else:
            self.output_label_global.config(text=message[0]['generated_text'])

    def update_prompt(self):
        self.prompt = self.user_input_global.get()
        self.prompt_label_global.config(text=self.prompt)

    def update_parameters(self):
        for index in self.parameters_entry_list.keys():
            if index == "selected_model":
                selected_model = "nothing"
                for i in self.parameters_entry_list.get(index).curselection():  # search the selected model
                    selected_model = self.parameters_entry_list.get(index).get(i)
                if selected_model != "nothing":
                    self.parameters.update({"selected_model": selected_model})
                else:  # in case there's no selected model
                    self.parameters.update({"selected_model": self.get_specific_param("selected_model")})
            else:
                self.parameters.update({index:float(self.parameters_entry_list.get(index).get())}) # float so the sdk don't break

            # Update the parameters of the model_handler with the updated parameters
        self.model_handler.update_parameters(self.parameters)
    def obs_update_parameters(self,data):
        self.parameters = data

    def obs_update_current_model(self, current_model):
        if self.model_label is not None:
            self.model_label.config(text=current_model)

    def get_specific_param(self,param):
            # return self.model_handler.get_parameters()[param]
        return self.parameters[param]

    def update(self,subject,data_type,data) -> None:
        """
        Receive update from subject.
        """

            # Determine the type of update given
        match data_type:
            case "output":
                self.update_output(data)
            case "model_list":
                self.obs_update_models_list(data)
                # case "gen_type": # Since it's a button exclusive command, shouldn't be used with observer-type update
                #     self.update_gen_type()
            case "current_model":
                self.obs_update_current_model(data)
            case "image":
                self.update_image(data)
            case "parameters":
                self.obs_update_parameters(data)
            case "reload":
                self.obs_update_models_list(data["model_list"])
                # self.update_gen_type() # same as above
                self.obs_update_current_model(data["current_model"])
                self.obs_update_processing_type(data["processing_type"])
                self.obs_update_parameters(data["parameters"])
            case _:
                print("ERROR : COULDN'T READ SUBJECT DATA")
        pass





